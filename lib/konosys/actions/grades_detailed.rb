module Konosys
  module Actions
    class GradesDetailed < Konosys::Action

      class GradeDetailedEntity < APISmith::Smash
        # Grade's program, eg: HEI4 Tronc Commun annualisé
        property :program
        # Grade's course, eg: Anglais
        property :course
        # Grade's name, eg: DS1 Anglais
        property :name
        # Grade's date, eg: 16/01/2012
        property :date, :transformer => lambda { |t| Date.parse t }
        # Grade's type, eg: Partiel / Devoir Surveillé
        property :type
        # Grade's weight, eg: 20
        property :weight, :transformer => :to_f
        # Grade's mark, eg: 15.0
        property :mark, :transformer => :to_f
        # Grade unknown?, eg: true when grade is 'NI', false otherwise
        property :unknown
      end

      GRADES_DETAILS_URL = 'http://e-campus.hei.fr/KonosysProd/popup.aspx?target=interface_MesCours_notes_etudiant_InscriptionSessionProgramme_lister_SessionProgrammeEtudiant&id='
      GRADES_DETAILS_URL_2 = 'http://e-campus.hei.fr/KonosysProd/interfaces/interface_impression_courriers_etudiant_portail_etudiant.aspx?id_inscriptionsessionprogramme='
      GRADES_DETAILS_URL_3 = 'http://e-campus.hei.fr/KonosysProd/pageCentrale.aspx?forceRefresh=true&target=interface_impression_courriers_etudiant_portail_etudiant_EtatVariable_rechercher_EtatEtudiant_PortailEtudiant&_valeurCourrier_string=&_id_userconnecte_long='

      def fetch
        login

        # Default parser when the fetched page isn't as expected (ie: anything but a web page)
        @browser.pluggable_parser.default = Mechanize::Download

        # Fetch the file in several steps
        # 1 - Go to the session's details and click the "Grades" button
        page = @browser.get GRADES_DETAILS_URL + @session_id
        form = page.forms.first
        @browser.submit form, form.buttons.second

        # 2 - Click "Refresh" on the documents waiting list
        page = @browser.get GRADES_DETAILS_URL_2 + @session_id
        form = page.forms.first
        @browser.submit form, form.buttons.first

        # 3 - Navigate to the document's waiting page
        page = @browser.get GRADES_DETAILS_URL_3 + @user_id

        link = page.body.scan(/openPopup\('(.+)','yes','yes'\)/).first.first
        page = @browser.get 'http://e-campus.hei.fr/KonosysProd/' + link

        link = page.body.scan(/window.open\("..\/(.+)"\)/).first.first
        page = @browser.get 'http://e-campus.hei.fr/KonosysProd/' + link

        # We wait while the PDF is generated by e-campus
        loop do
          sleep 0.5
          page = @browser.get page.uri

          break if page.body.include?('Erreur du serveur') or page.is_a?(Mechanize::Download)
        end

        # If we had an error on the way
        if page.body.include?('Erreur du serveur')
          throw Exceptions::DownloadError
        end

        # We parse the PDF file
        reader = PDF::Reader.new(page.body_io)

        grades = Array.new

        reader.pages.each do |reader_page|
          reader_page.text.each_line do |line|
            # Interesting lines look like this :
            # "Formation Humaine            CC1P4G                                  25/05/2014   CC         61.20    14.50"

            # Ugly trick to get rid of multiple space while keeping delimiters
            spaceless_line = line.gsub /\s{2,}/, '[|]'
            rows = spaceless_line.split '[|]'

            # We only want to look at these interesting arrays
            # ["Formation Humaine", "CC1P4G", "25/05/2014", "CC", "61.20", "14.50"]
            next unless rows.size == 6
            next if rows.first.include? 'Cursus' or rows.last.include? 'Note'

            course, name, date, type, weight, mark = rows
            unknown = false
            unknown = true if mark.include?('NI') or mark.include?('ABS') or mark.include?('PC')

            # Program is now always 'Unknown' as it is now excessively boring to try and fetch it
            grades.push GradeDetailedEntity.new(program: 'Unknown', course: course, name: name, date: date,
                                                type: type, weight: weight, mark: mark, unknown: unknown)
          end
        end

        grades
      end
    end
  end
end